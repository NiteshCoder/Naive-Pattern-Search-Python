#Naive Pattern Searching Algorithm

'''
- Naive searching algorithm mainy used for pattern searching from the given data.
- Easiest algorithm to understand and perform.

How it works?

- Compare elements and if its successfully compared then ,
  both the data and search Increment by 1 to compare further element.
  
- If both the element is different then ,
  pattern again initilise to 0th index but Data not.
 

Let's Understand with Example.
- Example: 
	
	Data    = ABCDBCABCABCABC
	pattern = BC
	
	compare A == B // False,
		Now pattern initilize to index 0.
	
	compare B == B // True,
		Both incremented by 1.
	
	compare C == C // True,
		Both incremented by 1.
		
		Now pattern size became 2 // So here we initilize pattern again with 0.
		
	Compare D == B // False,
		Now pattern initilize to index 0.
		
	Compare A == B // False
		Now pattern initilize to index 0.
		
- So you can see if element of data failed to compare with pattern ,
  Pattern initilise with 0 but data increment in each situation.
	
		
THANK YOU.

For Better understanding please visit :
	https://www.youtube.com/watch?v=k7UpWkVvajM&t=604s
			
'''

'''
ord() = Used to convert character to integer.
chr() = Used to convert integer to character.

- String is immutable so we can't overwrite again and again ,
  so I have taken new variable called result.
'''
def upper_case(data):
	result = ''
	for i in range(len(data)):
		if data[i] >= 'a' and data[i]<= 'z':
			result+= chr(ord(data[i]) - (32))
			
	return result;

'''
- Actual logic of naive pattern search algorithm.
- What this logic gives ?
		- Search for pattern
		If FOUND then
		- Number of pattern that mathched.
		
		Otherwise notify user that particulat pattern not found.
'''
def naive_pattern_search(data,search):
	n = len(data) #Finding length of data
	m = len(search) #Finding length of pattern to be searched.
	
	i = 0
	count = c = 0 #Taking for counting pattern if exixts.
	for j in range(m-1):#Loop continue till length of pattern to be Search.
		while i <= (n-1):#Data loop
			
			#if searched patten length reached highest index at that time again initilize with 0.
			if j > (m-1):
				j = 0
			
			#Data and search have same element then both Index increment by 1.
			if data[i]==search[j]:
				print(f"\n{ data[i] } { search[j] }")
				print(f"i : {i}  {data[i]}   j : {j}  {search[j]}")
				i+=1
				j+=1
				count+=1
				
				#If one pattern compared and found Successfully then Its Counter for pattern.
				if count== (m-1):
					c = c + 1
			#Initilise pattern again with 0 for searching with next element in data.
			else:
				j = 0 #Direct move to 0th index.
				i+=1
				count=0 #If data not found as per pattern continuously then it will start counting from 0 again.
	
	#Searched pattern occurs more then 0 then its Simply means that pattern found.
	if c > 0:
		return c;
	else:
		return -1;
	
	
#Main method : Start Execution from here.
if __name__ == "__main__":
	main_string = str(input("Enter String : "))
	main_string = upper_case(main_string)
	print("\n-----------------DATA------------------------")
	print(f"{ main_string } ")
	
	search_pattern = str(input("\nEnter Search Pattern : "))
	search_pattern = upper_case(search_pattern)
	print("\n-----------------SEARCHED FOR-----------------")
	print(f"{ search_pattern }")
	
	
	
	print("\n-----------------RESULT-----------------------")
	
	#Calling naive_pattern_search() function
	result=naive_pattern_search(main_string,search_pattern)
	if result > 0 :
		print(f"\nPattern Found : { result } Times")
	else:
		print("Opps ! Pattern not found")
#Generated by Niteshkumar Prajapati.